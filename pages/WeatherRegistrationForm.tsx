import React, { useState, useEffect } from 'react';
import './WeatherRegistrationForm.css';

interface FormData {
  name: string;
  mobile: string;
  village: string;
  landSize: string;
}

interface Location {
  lat: number | null;
  lon: number | null;
}

const WeatherRegistrationForm: React.FC = () => {
  const [formData, setFormData] = useState<FormData>({
    name: '',
    mobile: '',
    village: '',
    landSize: '',
  });

  const [location, setLocation] = useState<Location>({
    lat: null,
    lon: null,
  });

  const [submitted, setSubmitted] = useState(false);
  const [locationFetched, setLocationFetched] = useState(false);

  useEffect(() => {
    if ('geolocation' in navigator) {
      navigator.geolocation.getCurrentPosition(
        (pos) => {
          setLocation({
            lat: pos.coords.latitude,
            lon: pos.coords.longitude,
          });
          setLocationFetched(true);
        },
        (err) => {
          console.warn('Location error:', err.message);
          setLocationFetched(true); // Mark as attempted
        }
      );
    } else {
      setLocationFetched(true);
    }
  }, []);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const payload = {
      ...formData,
      location: location.lat && location.lon
        ? location
        : { lat: 'Not Available', lon: 'Not Available' },
    };

    // console.log('Form Submitted:', payload);

    // Example: send to backend API
    await fetch('/api/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });

    setSubmitted(true);
  };

  return (
    <div className="weather-registration-container">
      <div className="weather-registration-card">
        <h2>‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞ ‡§®‡•ã‡§Ç‡§¶‡§£‡•Ä ‡§´‡•â‡§∞‡•ç‡§Æ</h2>
        {submitted ? (
          <div className="success-message">
            ‚úÖ ‡§®‡•ã‡§Ç‡§¶‡§£‡•Ä ‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä!{' '}
            {location.lat === null ? (
              <span style={{ color: 'darkorange' }}>
                (‡§∏‡•ç‡§•‡§æ‡§® ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§ù‡§æ‡§≤‡•á ‡§®‡§æ‡§π‡•Ä)
              </span>
            ) : (
              '‡§≤‡•ã‡§ï‡•á‡§∂‡§®‡§∏‡§π ‡§´‡•â‡§∞‡•ç‡§Æ ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ù‡§æ‡§≤‡§æ ‡§Ü‡§π‡•á.'
            )}
          </div>
        ) : (
          <form onSubmit={handleSubmit} className="weather-form">
            <label>
              ‡§®‡§æ‡§µ:
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                required
              />
            </label>
            <label>
              ‡§Æ‡•ã‡§¨‡§æ‡§à‡§≤ ‡§®‡§Ç‡§¨‡§∞:
              <input
                type="tel"
                name="mobile"
                value={formData.mobile}
                onChange={handleChange}
                pattern="[0-9]{10}"
                required
              />
            </label>
            <label>
              ‡§ó‡§æ‡§µ:
              <input
                type="text"
                name="village"
                value={formData.village}
                onChange={handleChange}
                required
              />
            </label>
            <label>
              ‡§∂‡•á‡§§‡•Ä ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (‡§ó‡•Å‡§Ç‡§†‡•á/‡§è‡§ï‡§∞):
              <input
                type="text"
                name="landSize"
                value={formData.landSize}
                onChange={handleChange}
              />
            </label>

            {locationFetched ? (
              location.lat && location.lon ? (
                <p>üìç ‡§§‡•Å‡§Æ‡§ö‡•á ‡§∏‡•ç‡§•‡§æ‡§®: {location.lat.toFixed(4)}, {location.lon.toFixed(4)}</p>
              ) : (
                <p style={{ color: 'red' }}>‚ùó ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§Æ‡§ø‡§≥‡§µ‡§§‡§æ ‡§Ü‡§≤‡•á ‡§®‡§æ‡§π‡•Ä.</p>
              )
            ) : (
              <p>üì° ‡§≤‡•ã‡§ï‡•á‡§∂‡§® ‡§∂‡•ã‡§ß‡§§ ‡§Ü‡§π‡•ã‡§§...</p>
            )}

            <button type="submit">‡§®‡•ã‡§Ç‡§¶‡§£‡•Ä ‡§ï‡§∞‡§æ</button>
          </form>
        )}
      </div>
    </div>
  );
};

export default WeatherRegistrationForm;
